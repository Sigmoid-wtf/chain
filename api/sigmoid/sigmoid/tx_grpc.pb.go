// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sigmoid/sigmoid/tx.proto

package sigmoid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName               = "/sigmoid.sigmoid.Msg/UpdateParams"
	Msg_CreateRequest_FullMethodName              = "/sigmoid.sigmoid.Msg/CreateRequest"
	Msg_ApproveRequest_FullMethodName             = "/sigmoid.sigmoid.Msg/ApproveRequest"
	Msg_ProcessTransaction_FullMethodName         = "/sigmoid.sigmoid.Msg/ProcessTransaction"
	Msg_CreateUnstakeRequest_FullMethodName       = "/sigmoid.sigmoid.Msg/CreateUnstakeRequest"
	Msg_ApproveUnstakeRequest_FullMethodName      = "/sigmoid.sigmoid.Msg/ApproveUnstakeRequest"
	Msg_SetRaoCurrentStakedBalance_FullMethodName = "/sigmoid.sigmoid.Msg/SetRaoCurrentStakedBalance"
	Msg_CreateBridgeRequest_FullMethodName        = "/sigmoid.sigmoid.Msg/CreateBridgeRequest"
	Msg_ApproveBridgeRequest_FullMethodName       = "/sigmoid.sigmoid.Msg/ApproveBridgeRequest"
	Msg_IncomeBridgeRequest_FullMethodName        = "/sigmoid.sigmoid.Msg/IncomeBridgeRequest"
	Msg_CreateRequestSigned_FullMethodName        = "/sigmoid.sigmoid.Msg/CreateRequestSigned"
	Msg_SetLatestProcessedEthBlock_FullMethodName = "/sigmoid.sigmoid.Msg/SetLatestProcessedEthBlock"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateRequest(ctx context.Context, in *MsgCreateRequest, opts ...grpc.CallOption) (*MsgCreateRequestResponse, error)
	ApproveRequest(ctx context.Context, in *MsgApproveRequest, opts ...grpc.CallOption) (*MsgApproveRequestResponse, error)
	ProcessTransaction(ctx context.Context, in *MsgProcessTransaction, opts ...grpc.CallOption) (*MsgProcessTransactionResponse, error)
	CreateUnstakeRequest(ctx context.Context, in *MsgCreateUnstakeRequest, opts ...grpc.CallOption) (*MsgCreateUnstakeRequestResponse, error)
	ApproveUnstakeRequest(ctx context.Context, in *MsgApproveUnstakeRequest, opts ...grpc.CallOption) (*MsgApproveUnstakeRequestResponse, error)
	SetRaoCurrentStakedBalance(ctx context.Context, in *MsgSetRaoCurrentStakedBalance, opts ...grpc.CallOption) (*MsgSetRaoCurrentStakedBalanceResponse, error)
	CreateBridgeRequest(ctx context.Context, in *MsgCreateBridgeRequest, opts ...grpc.CallOption) (*MsgCreateBridgeRequestResponse, error)
	ApproveBridgeRequest(ctx context.Context, in *MsgApproveBridgeRequest, opts ...grpc.CallOption) (*MsgApproveBridgeRequestResponse, error)
	IncomeBridgeRequest(ctx context.Context, in *MsgIncomeBridgeRequest, opts ...grpc.CallOption) (*MsgIncomeBridgeRequestResponse, error)
	CreateRequestSigned(ctx context.Context, in *MsgCreateRequestSigned, opts ...grpc.CallOption) (*MsgCreateRequestSignedResponse, error)
	SetLatestProcessedEthBlock(ctx context.Context, in *MsgSetLatestProcessedEthBlock, opts ...grpc.CallOption) (*MsgSetLatestProcessedEthBlockResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRequest(ctx context.Context, in *MsgCreateRequest, opts ...grpc.CallOption) (*MsgCreateRequestResponse, error) {
	out := new(MsgCreateRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveRequest(ctx context.Context, in *MsgApproveRequest, opts ...grpc.CallOption) (*MsgApproveRequestResponse, error) {
	out := new(MsgApproveRequestResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessTransaction(ctx context.Context, in *MsgProcessTransaction, opts ...grpc.CallOption) (*MsgProcessTransactionResponse, error) {
	out := new(MsgProcessTransactionResponse)
	err := c.cc.Invoke(ctx, Msg_ProcessTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUnstakeRequest(ctx context.Context, in *MsgCreateUnstakeRequest, opts ...grpc.CallOption) (*MsgCreateUnstakeRequestResponse, error) {
	out := new(MsgCreateUnstakeRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateUnstakeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveUnstakeRequest(ctx context.Context, in *MsgApproveUnstakeRequest, opts ...grpc.CallOption) (*MsgApproveUnstakeRequestResponse, error) {
	out := new(MsgApproveUnstakeRequestResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveUnstakeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRaoCurrentStakedBalance(ctx context.Context, in *MsgSetRaoCurrentStakedBalance, opts ...grpc.CallOption) (*MsgSetRaoCurrentStakedBalanceResponse, error) {
	out := new(MsgSetRaoCurrentStakedBalanceResponse)
	err := c.cc.Invoke(ctx, Msg_SetRaoCurrentStakedBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBridgeRequest(ctx context.Context, in *MsgCreateBridgeRequest, opts ...grpc.CallOption) (*MsgCreateBridgeRequestResponse, error) {
	out := new(MsgCreateBridgeRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateBridgeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveBridgeRequest(ctx context.Context, in *MsgApproveBridgeRequest, opts ...grpc.CallOption) (*MsgApproveBridgeRequestResponse, error) {
	out := new(MsgApproveBridgeRequestResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveBridgeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IncomeBridgeRequest(ctx context.Context, in *MsgIncomeBridgeRequest, opts ...grpc.CallOption) (*MsgIncomeBridgeRequestResponse, error) {
	out := new(MsgIncomeBridgeRequestResponse)
	err := c.cc.Invoke(ctx, Msg_IncomeBridgeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRequestSigned(ctx context.Context, in *MsgCreateRequestSigned, opts ...grpc.CallOption) (*MsgCreateRequestSignedResponse, error) {
	out := new(MsgCreateRequestSignedResponse)
	err := c.cc.Invoke(ctx, Msg_CreateRequestSigned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetLatestProcessedEthBlock(ctx context.Context, in *MsgSetLatestProcessedEthBlock, opts ...grpc.CallOption) (*MsgSetLatestProcessedEthBlockResponse, error) {
	out := new(MsgSetLatestProcessedEthBlockResponse)
	err := c.cc.Invoke(ctx, Msg_SetLatestProcessedEthBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateRequest(context.Context, *MsgCreateRequest) (*MsgCreateRequestResponse, error)
	ApproveRequest(context.Context, *MsgApproveRequest) (*MsgApproveRequestResponse, error)
	ProcessTransaction(context.Context, *MsgProcessTransaction) (*MsgProcessTransactionResponse, error)
	CreateUnstakeRequest(context.Context, *MsgCreateUnstakeRequest) (*MsgCreateUnstakeRequestResponse, error)
	ApproveUnstakeRequest(context.Context, *MsgApproveUnstakeRequest) (*MsgApproveUnstakeRequestResponse, error)
	SetRaoCurrentStakedBalance(context.Context, *MsgSetRaoCurrentStakedBalance) (*MsgSetRaoCurrentStakedBalanceResponse, error)
	CreateBridgeRequest(context.Context, *MsgCreateBridgeRequest) (*MsgCreateBridgeRequestResponse, error)
	ApproveBridgeRequest(context.Context, *MsgApproveBridgeRequest) (*MsgApproveBridgeRequestResponse, error)
	IncomeBridgeRequest(context.Context, *MsgIncomeBridgeRequest) (*MsgIncomeBridgeRequestResponse, error)
	CreateRequestSigned(context.Context, *MsgCreateRequestSigned) (*MsgCreateRequestSignedResponse, error)
	SetLatestProcessedEthBlock(context.Context, *MsgSetLatestProcessedEthBlock) (*MsgSetLatestProcessedEthBlockResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateRequest(context.Context, *MsgCreateRequest) (*MsgCreateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedMsgServer) ApproveRequest(context.Context, *MsgApproveRequest) (*MsgApproveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRequest not implemented")
}
func (UnimplementedMsgServer) ProcessTransaction(context.Context, *MsgProcessTransaction) (*MsgProcessTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedMsgServer) CreateUnstakeRequest(context.Context, *MsgCreateUnstakeRequest) (*MsgCreateUnstakeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnstakeRequest not implemented")
}
func (UnimplementedMsgServer) ApproveUnstakeRequest(context.Context, *MsgApproveUnstakeRequest) (*MsgApproveUnstakeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveUnstakeRequest not implemented")
}
func (UnimplementedMsgServer) SetRaoCurrentStakedBalance(context.Context, *MsgSetRaoCurrentStakedBalance) (*MsgSetRaoCurrentStakedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRaoCurrentStakedBalance not implemented")
}
func (UnimplementedMsgServer) CreateBridgeRequest(context.Context, *MsgCreateBridgeRequest) (*MsgCreateBridgeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridgeRequest not implemented")
}
func (UnimplementedMsgServer) ApproveBridgeRequest(context.Context, *MsgApproveBridgeRequest) (*MsgApproveBridgeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBridgeRequest not implemented")
}
func (UnimplementedMsgServer) IncomeBridgeRequest(context.Context, *MsgIncomeBridgeRequest) (*MsgIncomeBridgeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomeBridgeRequest not implemented")
}
func (UnimplementedMsgServer) CreateRequestSigned(context.Context, *MsgCreateRequestSigned) (*MsgCreateRequestSignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestSigned not implemented")
}
func (UnimplementedMsgServer) SetLatestProcessedEthBlock(context.Context, *MsgSetLatestProcessedEthBlock) (*MsgSetLatestProcessedEthBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLatestProcessedEthBlock not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRequest(ctx, req.(*MsgCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveRequest(ctx, req.(*MsgApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessTransaction(ctx, req.(*MsgProcessTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUnstakeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUnstakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUnstakeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateUnstakeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUnstakeRequest(ctx, req.(*MsgCreateUnstakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveUnstakeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveUnstakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveUnstakeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveUnstakeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveUnstakeRequest(ctx, req.(*MsgApproveUnstakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRaoCurrentStakedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRaoCurrentStakedBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRaoCurrentStakedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetRaoCurrentStakedBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRaoCurrentStakedBalance(ctx, req.(*MsgSetRaoCurrentStakedBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBridgeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBridgeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateBridgeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBridgeRequest(ctx, req.(*MsgCreateBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveBridgeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveBridgeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveBridgeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveBridgeRequest(ctx, req.(*MsgApproveBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IncomeBridgeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncomeBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IncomeBridgeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IncomeBridgeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IncomeBridgeRequest(ctx, req.(*MsgIncomeBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRequestSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRequestSigned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRequestSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateRequestSigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRequestSigned(ctx, req.(*MsgCreateRequestSigned))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetLatestProcessedEthBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetLatestProcessedEthBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetLatestProcessedEthBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetLatestProcessedEthBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetLatestProcessedEthBlock(ctx, req.(*MsgSetLatestProcessedEthBlock))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigmoid.sigmoid.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateRequest",
			Handler:    _Msg_CreateRequest_Handler,
		},
		{
			MethodName: "ApproveRequest",
			Handler:    _Msg_ApproveRequest_Handler,
		},
		{
			MethodName: "ProcessTransaction",
			Handler:    _Msg_ProcessTransaction_Handler,
		},
		{
			MethodName: "CreateUnstakeRequest",
			Handler:    _Msg_CreateUnstakeRequest_Handler,
		},
		{
			MethodName: "ApproveUnstakeRequest",
			Handler:    _Msg_ApproveUnstakeRequest_Handler,
		},
		{
			MethodName: "SetRaoCurrentStakedBalance",
			Handler:    _Msg_SetRaoCurrentStakedBalance_Handler,
		},
		{
			MethodName: "CreateBridgeRequest",
			Handler:    _Msg_CreateBridgeRequest_Handler,
		},
		{
			MethodName: "ApproveBridgeRequest",
			Handler:    _Msg_ApproveBridgeRequest_Handler,
		},
		{
			MethodName: "IncomeBridgeRequest",
			Handler:    _Msg_IncomeBridgeRequest_Handler,
		},
		{
			MethodName: "CreateRequestSigned",
			Handler:    _Msg_CreateRequestSigned_Handler,
		},
		{
			MethodName: "SetLatestProcessedEthBlock",
			Handler:    _Msg_SetLatestProcessedEthBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sigmoid/sigmoid/tx.proto",
}
