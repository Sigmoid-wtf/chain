// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sigmoidtest/sigmoidtest/front_stake_request.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FrontStakeRequest struct {
	Sender        string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Mint          string `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
	Status        uint64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Amount        uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionId string `protobuf:"bytes,5,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (m *FrontStakeRequest) Reset()         { *m = FrontStakeRequest{} }
func (m *FrontStakeRequest) String() string { return proto.CompactTextString(m) }
func (*FrontStakeRequest) ProtoMessage()    {}
func (*FrontStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f67cb9991f6858f, []int{0}
}
func (m *FrontStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontStakeRequest.Merge(m, src)
}
func (m *FrontStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *FrontStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FrontStakeRequest proto.InternalMessageInfo

func (m *FrontStakeRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *FrontStakeRequest) GetMint() string {
	if m != nil {
		return m.Mint
	}
	return ""
}

func (m *FrontStakeRequest) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FrontStakeRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FrontStakeRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func init() {
	proto.RegisterType((*FrontStakeRequest)(nil), "sigmoidtest.sigmoidtest.FrontStakeRequest")
}

func init() {
	proto.RegisterFile("sigmoidtest/sigmoidtest/front_stake_request.proto", fileDescriptor_5f67cb9991f6858f)
}

var fileDescriptor_5f67cb9991f6858f = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2c, 0xce, 0x4c, 0xcf,
	0xcd, 0xcf, 0x4c, 0x29, 0x49, 0x2d, 0x2e, 0xd1, 0x47, 0x66, 0xa7, 0x15, 0xe5, 0xe7, 0x95, 0xc4,
	0x17, 0x97, 0x24, 0x66, 0xa7, 0xc6, 0x17, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0xe8, 0x15, 0x14,
	0xe5, 0x97, 0xe4, 0x0b, 0x89, 0x23, 0x29, 0xd3, 0x43, 0x62, 0x2b, 0x4d, 0x65, 0xe4, 0x12, 0x74,
	0x03, 0x69, 0x0b, 0x06, 0xe9, 0x0a, 0x82, 0x68, 0x12, 0x12, 0xe3, 0x62, 0x2b, 0x4e, 0xcd, 0x4b,
	0x49, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0x84, 0xb8, 0x58, 0x72,
	0x33, 0xf3, 0x4a, 0x24, 0x98, 0xc0, 0xa2, 0x60, 0x36, 0x58, 0x6d, 0x49, 0x62, 0x49, 0x69, 0xb1,
	0x04, 0xb3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x94, 0x07, 0x12, 0x4f, 0xcc, 0xcd, 0x2f, 0xcd, 0x2b,
	0x91, 0x60, 0x81, 0x88, 0x43, 0x78, 0x42, 0x2a, 0x5c, 0xbc, 0x25, 0x45, 0x89, 0x79, 0xc5, 0x89,
	0xc9, 0x25, 0x99, 0xf9, 0x79, 0x9e, 0x29, 0x12, 0xac, 0x60, 0xc3, 0x50, 0x05, 0x9d, 0xac, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18,
	0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x01, 0xea, 0x7c, 0x5d, 0xb0, 0x97,
	0x2b, 0x50, 0x02, 0xa0, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x67, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x08, 0x80, 0xb0, 0x96, 0x28, 0x01, 0x00, 0x00,
}

func (m *FrontStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionId) > 0 {
		i -= len(m.TransactionId)
		copy(dAtA[i:], m.TransactionId)
		i = encodeVarintFrontStakeRequest(dAtA, i, uint64(len(m.TransactionId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintFrontStakeRequest(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintFrontStakeRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Mint) > 0 {
		i -= len(m.Mint)
		copy(dAtA[i:], m.Mint)
		i = encodeVarintFrontStakeRequest(dAtA, i, uint64(len(m.Mint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintFrontStakeRequest(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrontStakeRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrontStakeRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FrontStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovFrontStakeRequest(uint64(l))
	}
	l = len(m.Mint)
	if l > 0 {
		n += 1 + l + sovFrontStakeRequest(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFrontStakeRequest(uint64(m.Status))
	}
	if m.Amount != 0 {
		n += 1 + sovFrontStakeRequest(uint64(m.Amount))
	}
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovFrontStakeRequest(uint64(l))
	}
	return n
}

func sovFrontStakeRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrontStakeRequest(x uint64) (n int) {
	return sovFrontStakeRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FrontStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontStakeRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontStakeRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontStakeRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrontStakeRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrontStakeRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontStakeRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrontStakeRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrontStakeRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrontStakeRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrontStakeRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrontStakeRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrontStakeRequest = fmt.Errorf("proto: unexpected end of group")
)
