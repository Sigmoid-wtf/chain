// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sigmoid/sigmoid/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAmountRequest struct {
	SenderAddress string `protobuf:"bytes,1,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
}

func (m *QueryGetAmountRequest) Reset()         { *m = QueryGetAmountRequest{} }
func (m *QueryGetAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAmountRequest) ProtoMessage()    {}
func (*QueryGetAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{2}
}
func (m *QueryGetAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAmountRequest.Merge(m, src)
}
func (m *QueryGetAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAmountRequest proto.InternalMessageInfo

func (m *QueryGetAmountRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

type QueryGetAmountResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryGetAmountResponse) Reset()         { *m = QueryGetAmountResponse{} }
func (m *QueryGetAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAmountResponse) ProtoMessage()    {}
func (*QueryGetAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{3}
}
func (m *QueryGetAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAmountResponse.Merge(m, src)
}
func (m *QueryGetAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAmountResponse proto.InternalMessageInfo

func (m *QueryGetAmountResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryGetLastProcessedRequest struct {
}

func (m *QueryGetLastProcessedRequest) Reset()         { *m = QueryGetLastProcessedRequest{} }
func (m *QueryGetLastProcessedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastProcessedRequest) ProtoMessage()    {}
func (*QueryGetLastProcessedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{4}
}
func (m *QueryGetLastProcessedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastProcessedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastProcessedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastProcessedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastProcessedRequest.Merge(m, src)
}
func (m *QueryGetLastProcessedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastProcessedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastProcessedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastProcessedRequest proto.InternalMessageInfo

type QueryGetLastProcessedResponse struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (m *QueryGetLastProcessedResponse) Reset()         { *m = QueryGetLastProcessedResponse{} }
func (m *QueryGetLastProcessedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastProcessedResponse) ProtoMessage()    {}
func (*QueryGetLastProcessedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{5}
}
func (m *QueryGetLastProcessedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastProcessedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastProcessedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastProcessedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastProcessedResponse.Merge(m, src)
}
func (m *QueryGetLastProcessedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastProcessedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastProcessedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastProcessedResponse proto.InternalMessageInfo

func (m *QueryGetLastProcessedResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type QueryGetPendingUnstakeRequestRequest struct {
}

func (m *QueryGetPendingUnstakeRequestRequest) Reset()         { *m = QueryGetPendingUnstakeRequestRequest{} }
func (m *QueryGetPendingUnstakeRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingUnstakeRequestRequest) ProtoMessage()    {}
func (*QueryGetPendingUnstakeRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{6}
}
func (m *QueryGetPendingUnstakeRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingUnstakeRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingUnstakeRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingUnstakeRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingUnstakeRequestRequest.Merge(m, src)
}
func (m *QueryGetPendingUnstakeRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingUnstakeRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingUnstakeRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingUnstakeRequestRequest proto.InternalMessageInfo

type QueryGetPendingUnstakeRequestResponse struct {
	Request *MsgCreateUnstakeRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryGetPendingUnstakeRequestResponse) Reset()         { *m = QueryGetPendingUnstakeRequestResponse{} }
func (m *QueryGetPendingUnstakeRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingUnstakeRequestResponse) ProtoMessage()    {}
func (*QueryGetPendingUnstakeRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{7}
}
func (m *QueryGetPendingUnstakeRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingUnstakeRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingUnstakeRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingUnstakeRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingUnstakeRequestResponse.Merge(m, src)
}
func (m *QueryGetPendingUnstakeRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingUnstakeRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingUnstakeRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingUnstakeRequestResponse proto.InternalMessageInfo

func (m *QueryGetPendingUnstakeRequestResponse) GetRequest() *MsgCreateUnstakeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryGetRaoStakedBalanceRequest struct {
}

func (m *QueryGetRaoStakedBalanceRequest) Reset()         { *m = QueryGetRaoStakedBalanceRequest{} }
func (m *QueryGetRaoStakedBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRaoStakedBalanceRequest) ProtoMessage()    {}
func (*QueryGetRaoStakedBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{8}
}
func (m *QueryGetRaoStakedBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRaoStakedBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRaoStakedBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRaoStakedBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRaoStakedBalanceRequest.Merge(m, src)
}
func (m *QueryGetRaoStakedBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRaoStakedBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRaoStakedBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRaoStakedBalanceRequest proto.InternalMessageInfo

type QueryGetRaoStakedBalanceResponse struct {
	RaoStakedBalance uint64 `protobuf:"varint,1,opt,name=raoStakedBalance,proto3" json:"raoStakedBalance,omitempty"`
}

func (m *QueryGetRaoStakedBalanceResponse) Reset()         { *m = QueryGetRaoStakedBalanceResponse{} }
func (m *QueryGetRaoStakedBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRaoStakedBalanceResponse) ProtoMessage()    {}
func (*QueryGetRaoStakedBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{9}
}
func (m *QueryGetRaoStakedBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRaoStakedBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRaoStakedBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRaoStakedBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRaoStakedBalanceResponse.Merge(m, src)
}
func (m *QueryGetRaoStakedBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRaoStakedBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRaoStakedBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRaoStakedBalanceResponse proto.InternalMessageInfo

func (m *QueryGetRaoStakedBalanceResponse) GetRaoStakedBalance() uint64 {
	if m != nil {
		return m.RaoStakedBalance
	}
	return 0
}

type QueryGetSigtaoRateDRequest struct {
}

func (m *QueryGetSigtaoRateDRequest) Reset()         { *m = QueryGetSigtaoRateDRequest{} }
func (m *QueryGetSigtaoRateDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSigtaoRateDRequest) ProtoMessage()    {}
func (*QueryGetSigtaoRateDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{10}
}
func (m *QueryGetSigtaoRateDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSigtaoRateDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSigtaoRateDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSigtaoRateDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSigtaoRateDRequest.Merge(m, src)
}
func (m *QueryGetSigtaoRateDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSigtaoRateDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSigtaoRateDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSigtaoRateDRequest proto.InternalMessageInfo

type QueryGetSigtaoRateDResponse struct {
	SigtaoRateD uint64 `protobuf:"varint,1,opt,name=sigtaoRateD,proto3" json:"sigtaoRateD,omitempty"`
}

func (m *QueryGetSigtaoRateDResponse) Reset()         { *m = QueryGetSigtaoRateDResponse{} }
func (m *QueryGetSigtaoRateDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSigtaoRateDResponse) ProtoMessage()    {}
func (*QueryGetSigtaoRateDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{11}
}
func (m *QueryGetSigtaoRateDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSigtaoRateDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSigtaoRateDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSigtaoRateDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSigtaoRateDResponse.Merge(m, src)
}
func (m *QueryGetSigtaoRateDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSigtaoRateDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSigtaoRateDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSigtaoRateDResponse proto.InternalMessageInfo

func (m *QueryGetSigtaoRateDResponse) GetSigtaoRateD() uint64 {
	if m != nil {
		return m.SigtaoRateD
	}
	return 0
}

type QueryGetPendingBridgeRequestRequest struct {
}

func (m *QueryGetPendingBridgeRequestRequest) Reset()         { *m = QueryGetPendingBridgeRequestRequest{} }
func (m *QueryGetPendingBridgeRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingBridgeRequestRequest) ProtoMessage()    {}
func (*QueryGetPendingBridgeRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{12}
}
func (m *QueryGetPendingBridgeRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingBridgeRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingBridgeRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingBridgeRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingBridgeRequestRequest.Merge(m, src)
}
func (m *QueryGetPendingBridgeRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingBridgeRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingBridgeRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingBridgeRequestRequest proto.InternalMessageInfo

type QueryGetPendingBridgeRequestResponse struct {
	Request *MsgCreateBridgeRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryGetPendingBridgeRequestResponse) Reset()         { *m = QueryGetPendingBridgeRequestResponse{} }
func (m *QueryGetPendingBridgeRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingBridgeRequestResponse) ProtoMessage()    {}
func (*QueryGetPendingBridgeRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{13}
}
func (m *QueryGetPendingBridgeRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingBridgeRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingBridgeRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingBridgeRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingBridgeRequestResponse.Merge(m, src)
}
func (m *QueryGetPendingBridgeRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingBridgeRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingBridgeRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingBridgeRequestResponse proto.InternalMessageInfo

func (m *QueryGetPendingBridgeRequestResponse) GetRequest() *MsgCreateBridgeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryGetLatestProcessedEthBlockRequest struct {
}

func (m *QueryGetLatestProcessedEthBlockRequest) Reset() {
	*m = QueryGetLatestProcessedEthBlockRequest{}
}
func (m *QueryGetLatestProcessedEthBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestProcessedEthBlockRequest) ProtoMessage()    {}
func (*QueryGetLatestProcessedEthBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{14}
}
func (m *QueryGetLatestProcessedEthBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestProcessedEthBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestProcessedEthBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestProcessedEthBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestProcessedEthBlockRequest.Merge(m, src)
}
func (m *QueryGetLatestProcessedEthBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestProcessedEthBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestProcessedEthBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestProcessedEthBlockRequest proto.InternalMessageInfo

type QueryGetLatestProcessedEthBlockResponse struct {
	BlockNumber string `protobuf:"bytes,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (m *QueryGetLatestProcessedEthBlockResponse) Reset() {
	*m = QueryGetLatestProcessedEthBlockResponse{}
}
func (m *QueryGetLatestProcessedEthBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestProcessedEthBlockResponse) ProtoMessage()    {}
func (*QueryGetLatestProcessedEthBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f67ad21978010b4c, []int{15}
}
func (m *QueryGetLatestProcessedEthBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestProcessedEthBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestProcessedEthBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestProcessedEthBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestProcessedEthBlockResponse.Merge(m, src)
}
func (m *QueryGetLatestProcessedEthBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestProcessedEthBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestProcessedEthBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestProcessedEthBlockResponse proto.InternalMessageInfo

func (m *QueryGetLatestProcessedEthBlockResponse) GetBlockNumber() string {
	if m != nil {
		return m.BlockNumber
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "sigmoid.sigmoid.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sigmoid.sigmoid.QueryParamsResponse")
	proto.RegisterType((*QueryGetAmountRequest)(nil), "sigmoid.sigmoid.QueryGetAmountRequest")
	proto.RegisterType((*QueryGetAmountResponse)(nil), "sigmoid.sigmoid.QueryGetAmountResponse")
	proto.RegisterType((*QueryGetLastProcessedRequest)(nil), "sigmoid.sigmoid.QueryGetLastProcessedRequest")
	proto.RegisterType((*QueryGetLastProcessedResponse)(nil), "sigmoid.sigmoid.QueryGetLastProcessedResponse")
	proto.RegisterType((*QueryGetPendingUnstakeRequestRequest)(nil), "sigmoid.sigmoid.QueryGetPendingUnstakeRequestRequest")
	proto.RegisterType((*QueryGetPendingUnstakeRequestResponse)(nil), "sigmoid.sigmoid.QueryGetPendingUnstakeRequestResponse")
	proto.RegisterType((*QueryGetRaoStakedBalanceRequest)(nil), "sigmoid.sigmoid.QueryGetRaoStakedBalanceRequest")
	proto.RegisterType((*QueryGetRaoStakedBalanceResponse)(nil), "sigmoid.sigmoid.QueryGetRaoStakedBalanceResponse")
	proto.RegisterType((*QueryGetSigtaoRateDRequest)(nil), "sigmoid.sigmoid.QueryGetSigtaoRateDRequest")
	proto.RegisterType((*QueryGetSigtaoRateDResponse)(nil), "sigmoid.sigmoid.QueryGetSigtaoRateDResponse")
	proto.RegisterType((*QueryGetPendingBridgeRequestRequest)(nil), "sigmoid.sigmoid.QueryGetPendingBridgeRequestRequest")
	proto.RegisterType((*QueryGetPendingBridgeRequestResponse)(nil), "sigmoid.sigmoid.QueryGetPendingBridgeRequestResponse")
	proto.RegisterType((*QueryGetLatestProcessedEthBlockRequest)(nil), "sigmoid.sigmoid.QueryGetLatestProcessedEthBlockRequest")
	proto.RegisterType((*QueryGetLatestProcessedEthBlockResponse)(nil), "sigmoid.sigmoid.QueryGetLatestProcessedEthBlockResponse")
}

func init() { proto.RegisterFile("sigmoid/sigmoid/query.proto", fileDescriptor_f67ad21978010b4c) }

var fileDescriptor_f67ad21978010b4c = []byte{
	// 840 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0xf7, 0x56, 0xad, 0x2b, 0x1e, 0xa2, 0xa5, 0x03, 0xc5, 0x74, 0xa1, 0x86, 0x2e, 0x06, 0x53,
	0x03, 0x5e, 0xcc, 0x9f, 0x52, 0x55, 0xaa, 0x2a, 0xdc, 0xa2, 0xaa, 0x6a, 0x8b, 0xc0, 0x28, 0x97,
	0x5c, 0x56, 0x63, 0xef, 0x68, 0x59, 0x61, 0xef, 0x2c, 0x3b, 0xe3, 0x08, 0x14, 0xe5, 0x92, 0x4f,
	0x90, 0x28, 0x87, 0xdc, 0x72, 0x8e, 0x94, 0x4b, 0xee, 0x39, 0xe4, 0x14, 0x89, 0x23, 0x52, 0x2e,
	0x39, 0x45, 0x11, 0x44, 0xca, 0xd7, 0x88, 0x3c, 0x3b, 0x63, 0xe3, 0xf5, 0xae, 0x8d, 0x2f, 0xd8,
	0xbc, 0x79, 0xbf, 0x3f, 0xfb, 0x3c, 0xef, 0xa7, 0x85, 0x19, 0xe6, 0x3a, 0x0d, 0xea, 0xda, 0xa6,
	0xfa, 0x3c, 0x6d, 0x92, 0xe0, 0xbc, 0xe8, 0x07, 0x94, 0x53, 0xf4, 0xad, 0x2c, 0x16, 0xe5, 0xa7,
	0xfe, 0x1d, 0x6e, 0xb8, 0x1e, 0x35, 0xc5, 0xdf, 0xb0, 0x47, 0x9f, 0x74, 0xa8, 0x43, 0xc5, 0x57,
	0xb3, 0xf5, 0x4d, 0x56, 0x67, 0x1d, 0x4a, 0x9d, 0x3a, 0x31, 0xb1, 0xef, 0x9a, 0xd8, 0xf3, 0x28,
	0xc7, 0xdc, 0xa5, 0x1e, 0x93, 0xa7, 0x85, 0x1a, 0x65, 0x0d, 0xca, 0xcc, 0x2a, 0x66, 0x24, 0x14,
	0x34, 0xef, 0x95, 0xaa, 0x84, 0xe3, 0x92, 0xe9, 0x63, 0xc7, 0xf5, 0x44, 0xb3, 0x62, 0x8a, 0x1a,
	0xf4, 0x71, 0x80, 0x1b, 0x8a, 0x69, 0x3a, 0x7a, 0xca, 0xcf, 0xc2, 0x13, 0x63, 0x12, 0xd0, 0x61,
	0x8b, 0xf9, 0x40, 0xb4, 0x57, 0xc8, 0x69, 0x93, 0x30, 0x6e, 0x1c, 0xc2, 0x44, 0x57, 0x95, 0xf9,
	0xd4, 0x63, 0x04, 0xfd, 0x06, 0xe9, 0x90, 0x76, 0x5a, 0x9b, 0xd7, 0x96, 0x47, 0x37, 0x32, 0xc5,
	0xc8, 0x93, 0x17, 0x43, 0x40, 0x79, 0xe4, 0xe2, 0xfd, 0x5c, 0xea, 0xf9, 0xa7, 0x97, 0x05, 0xad,
	0x22, 0x11, 0xc6, 0xef, 0xf0, 0xbd, 0xa0, 0xfc, 0x9b, 0xf0, 0xdd, 0x06, 0x6d, 0x7a, 0x5c, 0x6a,
	0xa1, 0x1c, 0x8c, 0x31, 0xe2, 0xd9, 0x24, 0xd8, 0xb5, 0xed, 0x80, 0xb0, 0x90, 0x7b, 0xa4, 0xd2,
	0x5d, 0x34, 0xd6, 0x61, 0x2a, 0x0a, 0x97, 0xa6, 0xa6, 0x20, 0x8d, 0x45, 0x45, 0x00, 0xbf, 0xac,
	0xc8, 0xff, 0x8c, 0x2c, 0xcc, 0x2a, 0xc4, 0x7f, 0x98, 0xf1, 0x83, 0x80, 0xd6, 0x08, 0x63, 0xc4,
	0x56, 0xcf, 0xb8, 0x07, 0x3f, 0x26, 0x9c, 0x4b, 0xe2, 0x1c, 0x8c, 0xf1, 0x00, 0x7b, 0x0c, 0xd7,
	0x5a, 0x73, 0xfe, 0xc7, 0x56, 0xc6, 0xba, 0x8a, 0xc6, 0x12, 0xe4, 0x14, 0xcd, 0x01, 0xf1, 0x6c,
	0xd7, 0x73, 0xee, 0x78, 0x8c, 0xe3, 0x13, 0x22, 0x75, 0x94, 0xdc, 0x09, 0x2c, 0x0e, 0xe8, 0x93,
	0xb2, 0x65, 0xf8, 0x3a, 0x08, 0x4b, 0x72, 0xca, 0xcb, 0x3d, 0x53, 0xfe, 0x9f, 0x39, 0x7f, 0x06,
	0x04, 0x73, 0x12, 0xa1, 0x50, 0x40, 0xe3, 0x27, 0x98, 0x53, 0x62, 0x15, 0x4c, 0x8f, 0x5a, 0x3d,
	0x76, 0x19, 0xd7, 0xb1, 0x57, 0x53, 0xbd, 0xc6, 0x3e, 0xcc, 0x27, 0xb7, 0x48, 0x2b, 0x05, 0x18,
	0x0f, 0x22, 0x67, 0x72, 0xc8, 0x3d, 0x75, 0x63, 0x16, 0x74, 0xc5, 0x77, 0xe4, 0x3a, 0x1c, 0xd3,
	0x0a, 0xe6, 0xe4, 0x2f, 0xa5, 0xf6, 0x07, 0xcc, 0xc4, 0x9e, 0x4a, 0xa1, 0x79, 0x18, 0x65, 0x9d,
	0xb2, 0xd4, 0xb8, 0x59, 0x32, 0x16, 0x61, 0x21, 0x32, 0xbe, 0x72, 0xe0, 0xda, 0x4e, 0x74, 0xca,
	0x6e, 0xcf, 0xaf, 0x11, 0x69, 0x93, 0x82, 0xbb, 0xd1, 0x21, 0xe7, 0x93, 0x87, 0xdc, 0xcd, 0xd0,
	0x9e, 0xf1, 0x32, 0x2c, 0x75, 0xee, 0x0f, 0x27, 0x37, 0x6e, 0xd0, 0x1e, 0x3f, 0x2e, 0xd7, 0x69,
	0xed, 0x44, 0x99, 0xfa, 0x17, 0xf2, 0x03, 0x3b, 0x3b, 0x83, 0xa8, 0xb6, 0x0a, 0xfb, 0xcd, 0x46,
	0x95, 0x04, 0xf2, 0xc6, 0xdd, 0x2c, 0x6d, 0xbc, 0x01, 0xf8, 0x4a, 0xb0, 0x21, 0x0e, 0xe9, 0x70,
	0xdd, 0xd0, 0x42, 0x8f, 0xf9, 0xde, 0x9d, 0xd6, 0x73, 0xfd, 0x9b, 0x42, 0x03, 0xc6, 0xdc, 0xc3,
	0xb7, 0x1f, 0x9f, 0x7c, 0xf1, 0x03, 0xca, 0x98, 0xf1, 0x81, 0x82, 0x1e, 0x6b, 0x30, 0xd2, 0x5e,
	0x42, 0xb4, 0x14, 0x4f, 0x1a, 0x5d, 0x72, 0x3d, 0x3f, 0xb0, 0x4f, 0xea, 0x6f, 0x0a, 0xfd, 0x35,
	0xb4, 0xd2, 0xa3, 0xef, 0x10, 0x6e, 0x85, 0xab, 0x6d, 0xde, 0xef, 0xca, 0x86, 0x07, 0xe8, 0x99,
	0x06, 0xe3, 0xd1, 0x35, 0x46, 0x6b, 0x89, 0x92, 0x71, 0x71, 0xa0, 0x17, 0x6f, 0xdb, 0x2e, 0x8d,
	0xae, 0x08, 0xa3, 0x8b, 0x68, 0x21, 0xd6, 0x68, 0x1d, 0x33, 0x6e, 0xf9, 0x6d, 0x2f, 0xaf, 0x35,
	0x98, 0x4e, 0x5a, 0x7c, 0xb4, 0x9d, 0xa8, 0xdc, 0x2f, 0x50, 0xf4, 0x5f, 0x86, 0x85, 0x49, 0xe3,
	0x5b, 0xc2, 0x78, 0x11, 0xad, 0xc6, 0x1a, 0xf7, 0x43, 0xac, 0xd5, 0x0c, 0xc1, 0x96, 0xbc, 0xed,
	0xe8, 0x85, 0x06, 0x13, 0x31, 0x51, 0x81, 0xd6, 0x13, 0x5d, 0x24, 0x04, 0x8f, 0x5e, 0x1a, 0x02,
	0x21, 0x2d, 0x9b, 0xc2, 0xf2, 0xcf, 0x28, 0x1f, 0x6b, 0x39, 0xc0, 0xd4, 0x12, 0x66, 0x6d, 0xab,
	0x2a, 0x5d, 0x3d, 0xd5, 0xe0, 0x9b, 0xee, 0xa8, 0x41, 0x2b, 0x89, 0xb2, 0xbd, 0x71, 0xa5, 0xaf,
	0xde, 0xae, 0x59, 0xda, 0x2b, 0x08, 0x7b, 0x39, 0x64, 0xc4, 0xda, 0x0b, 0x53, 0xcc, 0x0a, 0x30,
	0x27, 0x96, 0x8d, 0x5e, 0x69, 0x90, 0x49, 0x08, 0x27, 0xb4, 0x35, 0xe8, 0x17, 0x8d, 0x8b, 0x3c,
	0x7d, 0x7b, 0x48, 0xd4, 0xad, 0x16, 0x4d, 0x5d, 0x83, 0xaa, 0xc0, 0xb6, 0x6f, 0xc1, 0x85, 0x06,
	0x7a, 0x72, 0x8a, 0xa1, 0x9d, 0x3e, 0x3b, 0xd4, 0x2f, 0x21, 0xf5, 0x5f, 0x87, 0x07, 0xca, 0xc7,
	0xd8, 0x11, 0x8f, 0x51, 0x42, 0x66, 0xc2, 0x1a, 0xb6, 0xd0, 0x9d, 0x45, 0xb4, 0x08, 0x3f, 0xb6,
	0x44, 0x9a, 0x96, 0x4b, 0x17, 0x57, 0x59, 0xed, 0xf2, 0x2a, 0xab, 0x7d, 0xb8, 0xca, 0x6a, 0x8f,
	0xae, 0xb3, 0xa9, 0xcb, 0xeb, 0x6c, 0xea, 0xdd, 0x75, 0x36, 0x75, 0x37, 0xa3, 0x18, 0xce, 0x3a,
	0xaf, 0x4b, 0xe7, 0x3e, 0x61, 0xd5, 0xb4, 0x78, 0x65, 0xda, 0xfc, 0x1c, 0x00, 0x00, 0xff, 0xff,
	0xf2, 0x12, 0xad, 0xa3, 0x0d, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetAmount items.
	GetAmount(ctx context.Context, in *QueryGetAmountRequest, opts ...grpc.CallOption) (*QueryGetAmountResponse, error)
	// Queries a list of GetLastProcessed items.
	GetLastProcessed(ctx context.Context, in *QueryGetLastProcessedRequest, opts ...grpc.CallOption) (*QueryGetLastProcessedResponse, error)
	// Queries a list of GetPendingUnstakeRequest items.
	GetPendingUnstakeRequest(ctx context.Context, in *QueryGetPendingUnstakeRequestRequest, opts ...grpc.CallOption) (*QueryGetPendingUnstakeRequestResponse, error)
	// Queries a list of GetRaoStakedBalance items.
	GetRaoStakedBalance(ctx context.Context, in *QueryGetRaoStakedBalanceRequest, opts ...grpc.CallOption) (*QueryGetRaoStakedBalanceResponse, error)
	// Queries a list of GetSigtaoRateD items.
	GetSigtaoRateD(ctx context.Context, in *QueryGetSigtaoRateDRequest, opts ...grpc.CallOption) (*QueryGetSigtaoRateDResponse, error)
	// Queries a list of GetPendingBridgeRequest items.
	GetPendingBridgeRequest(ctx context.Context, in *QueryGetPendingBridgeRequestRequest, opts ...grpc.CallOption) (*QueryGetPendingBridgeRequestResponse, error)
	// Queries a list of GetLatestProcessedEthBlock items.
	GetLatestProcessedEthBlock(ctx context.Context, in *QueryGetLatestProcessedEthBlockRequest, opts ...grpc.CallOption) (*QueryGetLatestProcessedEthBlockResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAmount(ctx context.Context, in *QueryGetAmountRequest, opts ...grpc.CallOption) (*QueryGetAmountResponse, error) {
	out := new(QueryGetAmountResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastProcessed(ctx context.Context, in *QueryGetLastProcessedRequest, opts ...grpc.CallOption) (*QueryGetLastProcessedResponse, error) {
	out := new(QueryGetLastProcessedResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetLastProcessed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingUnstakeRequest(ctx context.Context, in *QueryGetPendingUnstakeRequestRequest, opts ...grpc.CallOption) (*QueryGetPendingUnstakeRequestResponse, error) {
	out := new(QueryGetPendingUnstakeRequestResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetPendingUnstakeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRaoStakedBalance(ctx context.Context, in *QueryGetRaoStakedBalanceRequest, opts ...grpc.CallOption) (*QueryGetRaoStakedBalanceResponse, error) {
	out := new(QueryGetRaoStakedBalanceResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetRaoStakedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSigtaoRateD(ctx context.Context, in *QueryGetSigtaoRateDRequest, opts ...grpc.CallOption) (*QueryGetSigtaoRateDResponse, error) {
	out := new(QueryGetSigtaoRateDResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetSigtaoRateD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingBridgeRequest(ctx context.Context, in *QueryGetPendingBridgeRequestRequest, opts ...grpc.CallOption) (*QueryGetPendingBridgeRequestResponse, error) {
	out := new(QueryGetPendingBridgeRequestResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetPendingBridgeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestProcessedEthBlock(ctx context.Context, in *QueryGetLatestProcessedEthBlockRequest, opts ...grpc.CallOption) (*QueryGetLatestProcessedEthBlockResponse, error) {
	out := new(QueryGetLatestProcessedEthBlockResponse)
	err := c.cc.Invoke(ctx, "/sigmoid.sigmoid.Query/GetLatestProcessedEthBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetAmount items.
	GetAmount(context.Context, *QueryGetAmountRequest) (*QueryGetAmountResponse, error)
	// Queries a list of GetLastProcessed items.
	GetLastProcessed(context.Context, *QueryGetLastProcessedRequest) (*QueryGetLastProcessedResponse, error)
	// Queries a list of GetPendingUnstakeRequest items.
	GetPendingUnstakeRequest(context.Context, *QueryGetPendingUnstakeRequestRequest) (*QueryGetPendingUnstakeRequestResponse, error)
	// Queries a list of GetRaoStakedBalance items.
	GetRaoStakedBalance(context.Context, *QueryGetRaoStakedBalanceRequest) (*QueryGetRaoStakedBalanceResponse, error)
	// Queries a list of GetSigtaoRateD items.
	GetSigtaoRateD(context.Context, *QueryGetSigtaoRateDRequest) (*QueryGetSigtaoRateDResponse, error)
	// Queries a list of GetPendingBridgeRequest items.
	GetPendingBridgeRequest(context.Context, *QueryGetPendingBridgeRequestRequest) (*QueryGetPendingBridgeRequestResponse, error)
	// Queries a list of GetLatestProcessedEthBlock items.
	GetLatestProcessedEthBlock(context.Context, *QueryGetLatestProcessedEthBlockRequest) (*QueryGetLatestProcessedEthBlockResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetAmount(ctx context.Context, req *QueryGetAmountRequest) (*QueryGetAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmount not implemented")
}
func (*UnimplementedQueryServer) GetLastProcessed(ctx context.Context, req *QueryGetLastProcessedRequest) (*QueryGetLastProcessedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastProcessed not implemented")
}
func (*UnimplementedQueryServer) GetPendingUnstakeRequest(ctx context.Context, req *QueryGetPendingUnstakeRequestRequest) (*QueryGetPendingUnstakeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingUnstakeRequest not implemented")
}
func (*UnimplementedQueryServer) GetRaoStakedBalance(ctx context.Context, req *QueryGetRaoStakedBalanceRequest) (*QueryGetRaoStakedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaoStakedBalance not implemented")
}
func (*UnimplementedQueryServer) GetSigtaoRateD(ctx context.Context, req *QueryGetSigtaoRateDRequest) (*QueryGetSigtaoRateDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigtaoRateD not implemented")
}
func (*UnimplementedQueryServer) GetPendingBridgeRequest(ctx context.Context, req *QueryGetPendingBridgeRequestRequest) (*QueryGetPendingBridgeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingBridgeRequest not implemented")
}
func (*UnimplementedQueryServer) GetLatestProcessedEthBlock(ctx context.Context, req *QueryGetLatestProcessedEthBlockRequest) (*QueryGetLatestProcessedEthBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestProcessedEthBlock not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAmount(ctx, req.(*QueryGetAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastProcessed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastProcessedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastProcessed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetLastProcessed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastProcessed(ctx, req.(*QueryGetLastProcessedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingUnstakeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingUnstakeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingUnstakeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetPendingUnstakeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingUnstakeRequest(ctx, req.(*QueryGetPendingUnstakeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRaoStakedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRaoStakedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRaoStakedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetRaoStakedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRaoStakedBalance(ctx, req.(*QueryGetRaoStakedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSigtaoRateD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSigtaoRateDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSigtaoRateD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetSigtaoRateD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSigtaoRateD(ctx, req.(*QueryGetSigtaoRateDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingBridgeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingBridgeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingBridgeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetPendingBridgeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingBridgeRequest(ctx, req.(*QueryGetPendingBridgeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestProcessedEthBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestProcessedEthBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestProcessedEthBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigmoid.sigmoid.Query/GetLatestProcessedEthBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestProcessedEthBlock(ctx, req.(*QueryGetLatestProcessedEthBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sigmoid.sigmoid.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetAmount",
			Handler:    _Query_GetAmount_Handler,
		},
		{
			MethodName: "GetLastProcessed",
			Handler:    _Query_GetLastProcessed_Handler,
		},
		{
			MethodName: "GetPendingUnstakeRequest",
			Handler:    _Query_GetPendingUnstakeRequest_Handler,
		},
		{
			MethodName: "GetRaoStakedBalance",
			Handler:    _Query_GetRaoStakedBalance_Handler,
		},
		{
			MethodName: "GetSigtaoRateD",
			Handler:    _Query_GetSigtaoRateD_Handler,
		},
		{
			MethodName: "GetPendingBridgeRequest",
			Handler:    _Query_GetPendingBridgeRequest_Handler,
		},
		{
			MethodName: "GetLatestProcessedEthBlock",
			Handler:    _Query_GetLatestProcessedEthBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sigmoid/sigmoid/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastProcessedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastProcessedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastProcessedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLastProcessedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastProcessedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastProcessedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionId) > 0 {
		i -= len(m.TransactionId)
		copy(dAtA[i:], m.TransactionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingUnstakeRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingUnstakeRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingUnstakeRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingUnstakeRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingUnstakeRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingUnstakeRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRaoStakedBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRaoStakedBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRaoStakedBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRaoStakedBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRaoStakedBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRaoStakedBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RaoStakedBalance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RaoStakedBalance))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSigtaoRateDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSigtaoRateDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSigtaoRateDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSigtaoRateDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSigtaoRateDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSigtaoRateDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigtaoRateD != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SigtaoRateD))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingBridgeRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingBridgeRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingBridgeRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingBridgeRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingBridgeRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingBridgeRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestProcessedEthBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestProcessedEthBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestProcessedEthBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestProcessedEthBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestProcessedEthBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestProcessedEthBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockNumber) > 0 {
		i -= len(m.BlockNumber)
		copy(dAtA[i:], m.BlockNumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryGetLastProcessedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLastProcessedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingUnstakeRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPendingUnstakeRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRaoStakedBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRaoStakedBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RaoStakedBalance != 0 {
		n += 1 + sovQuery(uint64(m.RaoStakedBalance))
	}
	return n
}

func (m *QueryGetSigtaoRateDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSigtaoRateDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigtaoRateD != 0 {
		n += 1 + sovQuery(uint64(m.SigtaoRateD))
	}
	return n
}

func (m *QueryGetPendingBridgeRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPendingBridgeRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLatestProcessedEthBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLatestProcessedEthBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockNumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastProcessedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastProcessedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastProcessedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastProcessedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastProcessedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastProcessedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingUnstakeRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingUnstakeRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingUnstakeRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingUnstakeRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingUnstakeRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingUnstakeRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &MsgCreateUnstakeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRaoStakedBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRaoStakedBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRaoStakedBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRaoStakedBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRaoStakedBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRaoStakedBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaoStakedBalance", wireType)
			}
			m.RaoStakedBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaoStakedBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSigtaoRateDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSigtaoRateDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSigtaoRateDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSigtaoRateDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSigtaoRateDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSigtaoRateDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigtaoRateD", wireType)
			}
			m.SigtaoRateD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigtaoRateD |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingBridgeRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingBridgeRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingBridgeRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingBridgeRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingBridgeRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingBridgeRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &MsgCreateBridgeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestProcessedEthBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestProcessedEthBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestProcessedEthBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestProcessedEthBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestProcessedEthBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestProcessedEthBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
